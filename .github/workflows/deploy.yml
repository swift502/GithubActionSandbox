name: Build And Deploy

on:
  push:
    inputs:
      path:
        description: "Path of the directory containing your site"
        required: false
        default: "."
  
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository using git
        uses: actions/checkout@v3
      - name: Check lockfiles
        id: lockfile
        shell: "bash"
        env:
          INPUT_PM: ${{ inputs.package-manager }}
        run: |
          len=`echo $INPUT_PM | wc -c`
          if [ $len -gt 1 ]; then
              echo "::set-output name=PACKAGE_MANAGER::$INPUT_PM"
              echo "node_pm=$INPUT_PM" >> $GITHUB_ENV
          elif [ $(find "." -name "pnpm-lock.yaml") ]; then
              echo "::set-output name=PACKAGE_MANAGER::pnpm"
              echo "node_pm=pnpm" >> $GITHUB_ENV
          elif [ $(find "." -name "yarn.lock") ]; then 
              echo "::set-output name=PACKAGE_MANAGER::yarn"
              echo "node_pm=yarn" >> $GITHUB_ENV
          elif [ $(find "." -name "package-lock.json") ]; then 
              echo "::set-output name=PACKAGE_MANAGER::npm"
              echo "node_pm=npm" >> $GITHUB_ENV
          else
              echo "No lockfile found.
          Please specify your preferred \"package-manager\" in the action configuration."
              exit 1
          fi
      - name: Setup PNPM
        if: ${{ steps.lockfile.outputs.PACKAGE_MANAGER == 'pnpm' }}
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.x.x

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
          cache: ${{ steps.lockfile.outputs.PACKAGE_MANAGER }}

      - name: Install
        shell: "bash"
        run: |
          cd ${{ inputs.path }}
          $node_pm install
      - name: Build
        shell: "bash"
        env:
          PACKAGE_MANAGER: ${{ steps.lockfile.outputs.PACKAGE_MANAGER }}
        run: |
          cd ${{ inputs.path }}
          $node_pm run build
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: "${{ inputs.path }}/dist/"